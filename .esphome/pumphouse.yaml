#**************************************************************
#  PROJECT:            Pumphouse Monitor
#  DEVICE/BOARD:       ESP32-C3 (esp32-c3-devkitm-1)
#  VERSION:            1.2.0
#  AUTHOR:             John Camm
#  LAST UPDATED:       2025-08-25
#**************************************************************
#  DESCRIPTION
#    ESPHome-based pumphouse monitor with dual ratiometric pressure
#    sensors (5V, 0.5‚Äì4.5V via divider), SHT30 temp/humidity, SSD1306
#    OLED dashboard, onboard RGB status LED with night mode, SNTP time
#    sync, and a web UI for calibration & settings.
#
#    v1.2.0 focuses on cleaner pressure readings and documented
#    5V-offset handling:
#      - Clarified 5V supply w/ 0.5‚Äì4.5V sensor output and 0.33‚Äì2.97V at ADC
#      - Added practical smoothing chain (median + EMA + small window)
#      - Optional anti-spike guard and HA-friendly throttling
#
#**************************************************************
#  SENSOR & FEATURE SPECIFICATIONS
#    - Pressure: SEN0257-class (0.5‚Äì4.5V ratiometric on 5V; divided to ADC)
#    - Temperature/Humidity: SHT30 (I¬≤C)
#    - Display: SSD1306 128x64 OLED (I¬≤C), multi-page UI
#    - LED: Onboard NeoPixel, status + night mode window
#    - Time: SNTP (pool.ntp.org)
#    - Web: Built-in ESPHome web_server with grouped sorting
#
#**************************************************************
#  GPIO PIN ASSIGNMENTS
#  -------------------------------------------------------------------
#    GPIO    |   Function / Peripheral
#  ----------|--------------------------------------------------------
#    GPIO0   |   Pressure Sensor 1 (ADC)
#    GPIO1   |   Pressure Sensor 2 (ADC)
#    GPIO2   |   I¬≤C SDA (OLED, SHT30)
#    GPIO3   |   I¬≤C SCL (OLED, SHT30)
#    GPIO8   |   Onboard NeoPixel RGB LED
#  -------------------------------------------------------------------
#
#  - Pressure sensors powered at 5V; outputs divided to ESP32-C3 ADC.
#  - I¬≤C bus shared by SHT30 and OLED. Core logic & UI in this YAML.
#
#**************************************************************
#  CHANGELOG
#    [v1.2.0] - 2025-08-25
#      - Confirmed/clarified 5V sensor offset math (0.5V ‚Üí ~0.33V at ADC)
#      - Smoothing chain documented (median + EMA + small window + throttle)
#      - Optional anti-spike guard pattern noted for transient rejection
#    [v1.1.0] - 2025-06-12
#      - Added user-configurable LED Night Mode (22:00‚Äì06:30) & web control
#    [v1.0.0] - 2025-06-06
#      - Initial release: dual pressure, SHT30, OLED UI, RGB LED, SNTP, web UI
#**************************************************************

# === ESPHome Core Configuration ===
esphome:
  name: "pumphouse"
  friendly_name: "pumphouse"
  comment: Pumphouse Monitor (esp32-c3-devkitm-1)

# === Hardware Details ===
esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# === Logging Configuration ===
logger:
  level: WARN # NONE, ERROR, WARN, INFO, DEBUG, VERBOSE, VERY_VERBOSE

# === Remote API and OTA Update Support ===
api:
  encryption:
    key: "Lm+Yuqun5sQa7Q14IurFsHjK7ayXirwm40EtxjFQdxY="
ota:
  - platform: esphome
    password: "d9798d2ed2bc958718d4bc21979ed9a1"
  - platform: web_server

# === Wifi and Fallback Hotspot Configuration ===
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "pumphouse"
    password: "uMDPW9mlouOl"

# === Captive Portal ===
captive_portal:

# === Web Server ===
web_server:
  version: 3
  auth:
    username: saintmoor
    password: saintmoor
  sorting_groups:
    - id: pressure_values
      name: "üîµ Pressure"
      sorting_weight: -25
    - id: environment_values
      name: "üå°Ô∏è Environment"
      sorting_weight: -20
    - id: alert_status
      name: "üö® Alerts"
      sorting_weight: -15
    - id: config_settings
      name: "‚öôÔ∏è Calibration & Config"
      sorting_weight: -10
    - id: status_settings
      name: "üìä System Status"
      sorting_weight: -10

# === Time Configuration ===
time:
  - platform: sntp
    id: sntp_time
    timezone: America/New_York
    servers:
     - 0.pool.ntp.org
     - 1.pool.ntp.org
     - 2.pool.ntp.org

# === Global Variables ===
globals:
  - id: temp_comp_factor
    type: float
    restore_value: false
    initial_value: '0.050'
  - id: auto_temp_comp_factor
    type: float
    initial_value: '0.050'
    restore_value: false
  - id: last_manual_adjustment_time
    type: uint32_t
    restore_value: false
    initial_value: '0'
  - id: offset_volts
    type: float
    restore_value: false
    initial_value: '0.33' #0.23
  - id: upper_psi_threshold
    type: float
    restore_value: true
    initial_value: '54.0'
  - id: lower_psi_threshold
    type: float
    restore_value: true
    initial_value: '38.0'
  - id: current_pressure
    type: float
    restore_value: false
    initial_value: '40.0'
  - id: led_night_mode_state
    type: bool
    restore_value: true
    initial_value: 'true'

# === Adjustable Factors and Offsets ===
number:
  - platform: template
    name: "Temperature Compensation Factor"
    id: temp_comp_number
    icon: "mdi:thermometer"
    min_value: -0.200
    max_value: 0.200
    step: 0.005
    initial_value: 0.050
    optimistic: true
    internal: true
    mode: slider
    set_action:
      then:
        - lambda: |-
            id(temp_comp_factor) = x;
            id(last_manual_adjustment_time) = millis() / 1000;
            ESP_LOGI("temp_comp", "[MANUAL] Slider set to %.3f", x);
    web_server:
      sorting_group_id: config_settings
  - platform: template
    name: "Sensor Offset Volts"
    id: offset_volts_number_1
    icon: "mdi:lightning-bolt"
    min_value: -0.50
    max_value: 0.50
    step: 0.01
    initial_value: 0.33 #0.23
    optimistic: true
    internal: false
    mode: slider
    set_action:
      then:
        - lambda: |-
            id(offset_volts) = x;
    web_server:
      sorting_group_id: config_settings
  - platform: template
    id: pressure_min_threshold
    name: "Pressure Min (PSI)"
    unit_of_measurement: "psi"
    icon: "mdi:gauge"
    min_value: 0
    max_value: 100
    step: 0.5
    initial_value: 38.0
    mode: box
    on_value:
      then:
        - lambda: |-
            id(lower_psi_threshold) = x;
    optimistic: true
    web_server:
      sorting_group_id: config_settings
  - platform: template
    id: pressure_max_threshold
    name: "Pressure Max (PSI)"
    unit_of_measurement: "psi"
    icon: "mdi:gauge"
    min_value: 0
    max_value: 100
    step: 0.5
    initial_value: 54.0
    mode: box
    on_value:
      then:
        - lambda: |-
            id(upper_psi_threshold) = x;
    optimistic: true
    web_server:
      sorting_group_id: config_settings

# === i2c Sensors and Display ===
i2c:
  sda: 2
  scl: 3
  scan: false
  id: bus_a
  timeout: 10ms

# === Binary Sensors ===
binary_sensor:
  - platform: status
    name: "Status"
    icon: "mdi:state-machine"
  - platform: template
    id: pressure_alert
    name: "Pressure Alert"
    icon: mdi:alert
    lambda: |-
      return (id(pressure_psi).state < id(pressure_min_threshold).state) ||
             (id(pressure_psi).state > id(pressure_max_threshold).state);
    web_server:
      sorting_group_id: alert_status

# === Buttons ===
button:
  - platform: template
    name: "Calibrate Pressure to Zero"
    icon: "mdi:target-variant"
    on_press:
      then:
        - lambda: |-
            id(offset_volts) = id(pressure_volts_1).state;
            ESP_LOGI("calibration", "Calibrated Pressure: Zero offset set to %.3f", id(offset_volts));
    web_server:
      sorting_group_id: config_settings

# === Light Output ===
light:
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    chipset: WS2811
    pin: 8
    num_leds: 1
    restore_mode: ALWAYS_ON
    name: "Onboard LED"
    id: onboard_led
    icon: "mdi:led-strip"
#  - platform: neopixelbus
#    type: GRB
#    variant: WS2811
#    pin: GPIO08
#    name: "Onboard LED"
#    id: onboard_led
#    icon: "mdi:led-strip"
#    num_leds: 1
#    restore_mode: ALWAYS_ON
    on_turn_on:
      then:
        - light.control:
            brightness: 25%
            id: onboard_led
            effect: Solid Green
    effects:
      - addressable_color_wipe:
          name: "Solid Red"
          colors:
            - red: 100%
              green: 0%
              blue: 0%
              num_leds: 1
          reverse: false
      - addressable_color_wipe:
          name: "Solid Green"
          colors:
            - red: 0%
              green: 100%
              blue: 0%
              num_leds: 1
          reverse: false
      - addressable_color_wipe:
          name: "Solid Yellow"
          colors:
            - red: 100%
              green: 100%
              blue: 0%
              num_leds: 1
          reverse: false
      - addressable_color_wipe:
          name: "Solid Blue"
          colors:
            - red: 0%
              green: 0%
              blue: 100%
              num_leds: 1
          reverse: false
      - addressable_color_wipe:
          name: "Solid White"
          colors:
            - red: 100%
              green: 100%
              blue: 100%
              num_leds: 1
          reverse: false
      - strobe:
          name: "Blink Blue"
          colors:
            - state: True
              red: 0%
              green: 0%
              blue: 100%
              duration: 500ms
            - state: False
              duration: 500ms
      - strobe:
          name: "Blink Green"
          colors:
            - state: True
              red: 0%
              green: 100%
              blue: 0%
              duration: 500ms
            - state: False
              duration: 500ms
      - strobe:
          name: "Blink Red"
          colors:
            - state: True
              red: 100%
              green: 0%
              blue: 0%
              duration: 500ms
            - state: False
              duration: 500ms
      - strobe:
          name: "Blink Yellow"
          colors:
            - state: True
              red: 100%
              green: 100%
              blue: 0%
              duration: 500ms
            - state: False
              duration: 500ms
      - strobe:
          name: "Blink White"
          colors:
            - state: True
              red: 100%
              green: 100%
              blue: 100%
              duration: 500ms
            - state: False
              duration: 500ms
      - addressable_rainbow:
          name: "Rainbow Effect"
          speed: 10
          width: 50

# ==== OLED Configuration ===
font:
  - file: 'fonts/arial.ttf'
    id: arial_medium
    size: 14
  - file: "fonts/OpenSans-Regular.ttf"
    id: opensans_medium
    size: 12
  - file: "fonts/OpenSans-Regular.ttf"
    id: opensans_small
    size: 10
  - file: "gfonts://Roboto" # gfonts://family[@weight]
    id: roboto
    size: 20
  - file: "gfonts://Roboto"
    id: roboto_medium
    size: 15
  - file: "gfonts://Roboto"
    id: roboto_small
    size: 12
  - file: "gfonts://Roboto"
    id: roboto_smallest
    size: 10
  - file: 'fonts/BebasNeue-Regular.ttf'
    id: bebasneue_large
    size: 48
  - file: 'fonts/BebasNeue-Regular.ttf'
    id: bebasneue_medium
    size: 32
  - file: 'fonts/Silkscreen-Regular.ttf'
    id: silkscreen_medium
    size: 10
  - file: 'fonts/Silkscreen-Regular.ttf'
    id: silkscreen_small
    size: 8
  - file: 'fonts/arial.ttf'
    id: arial_large
    size: 16

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    i2c_id: bus_a
    id: oled_display
    auto_clear_enabled: True
    show_test_card: false
    update_interval: 5s
    pages:
      - id: page1 
        lambda: |-
          // it.printf(X, Y,.. (X (Row) and Y (Column)) 
          // Print "pumphouse" in top center.
          it.printf(it.get_width() / 2, 8, id(roboto_medium), TextAlign::TOP_CENTER, "pumphouse");
          // Print time in HH:MM format
          it.strftime(0, 60, id(bebasneue_large), TextAlign::BASELINE_LEFT, "%H:%M", id(sntp_time).now());
          // Print Temperature
          if (id(temperature).has_state()) {
          it.printf(127, 23, id(arial_medium), TextAlign::TOP_RIGHT, "%.1f¬∞", id(temperature).state);
          }
          // Print Relative humidity
          if (id(relative_humidity).has_state()) {
          it.printf(127, 60, id(arial_medium), TextAlign::BASELINE_RIGHT, "%.1f¬∞", id(relative_humidity).state);
          }
      - id: page2
        lambda: |-
          // Print "Temperature" in top center.
          it.printf(it.get_width() / 2, 8, id(roboto_medium), TextAlign::TOP_CENTER, "Temperature");
          // Print Temperature
          if (id(temperature).has_state()) {
          it.printf(it.get_width() / 2, it.get_height() - 4, id(bebasneue_large), TextAlign::BASELINE_CENTER, "%.1f¬∞", id(temperature).state);
          }
      - id: page3
        lambda: |-
          // Print "Relative Humidity" in top center.
          it.printf(it.get_width() / 2, 8, id(roboto_medium), TextAlign::TOP_CENTER, "Relative Humidity");
          // Print Relative humidity
          if (id(relative_humidity).has_state()) {
          it.printf(it.get_width() / 2, it.get_height() - 4, id(bebasneue_large), TextAlign::BASELINE_CENTER, "%.1f¬∞", id(relative_humidity).state);
          }
      - id: page4
        lambda: |-
          // Print "Absolute Humidity" in top center.
          it.printf(it.get_width() / 2, 8, id(roboto_medium), TextAlign::TOP_CENTER, "Absolute Humidity");
          // Print Absolute humidity
          if (id(absolute_hum).has_state()) {
          it.printf(it.get_width() / 2, it.get_height() - 4, id(bebasneue_large), TextAlign::BASELINE_CENTER, "%.1f¬∞", id(absolute_hum).state);
          }
      - id: page5
        lambda: |-
          // Print "Pressure" in top center.
          it.printf(it.get_width() / 2, 8, id(roboto_medium), TextAlign::TOP_CENTER, "Pressure");
          // Print Pressure
          if (id(pressure_psi).has_state()) {
          it.printf(it.get_width() / 2, it.get_height() - 4, id(bebasneue_large), TextAlign::BASELINE_CENTER, "%.0f¬∞", id(pressure_psi).state);
          }
      - id: page6
        lambda: |-
          // Print "Temp Compensation" in top center.
          it.printf(it.get_width() / 2, 8, id(roboto_medium), TextAlign::TOP_CENTER, "Temp Comp");
          // Print Temp Compensation
          if (!id(temp_comp_source).state.empty()) {
          it.printf(it.get_width() / 2, it.get_height() - 4, id(bebasneue_large), TextAlign::BASELINE_CENTER, "%s", id(temp_comp_source).state.c_str());
          }
      - id: page7
        lambda: |-
          // Print "Temp Comp Factor" in top center.
          it.printf(it.get_width() / 2, 8, id(roboto_medium), TextAlign::TOP_CENTER, "Comp Factor");
          // Print Temp Comp Factor
          if (id(pressure_psi).has_state()) {
          it.printf(it.get_width() / 2, it.get_height() - 4, id(bebasneue_large), TextAlign::BASELINE_CENTER, "%.3f", id(temp_comp_factor));
          }

# === Sensors ===
# === SHT-30 Sensors ===
sensor:
  - platform: sht3xd
    address: 0x44
    i2c_id: bus_a    
    update_interval: 5s
    temperature:
      name: "Temperature"
      id: temperature
      icon: "mdi:thermometer"
      device_class: "temperature"
      accuracy_decimals: 1
      filters:
        - throttle: 1s
        - heartbeat: 5s
        - debounce: 0.1s
        - filter_out: nan
        - delta: 5.0
        - lambda: return x * (9.0/5.0) + 32.0; # Convert Celsius to Fahrenheit
      unit_of_measurement: "¬∞F"
      internal: false
      web_server:
        sorting_group_id: environment_values
    humidity:
      name: "Relative Humidity"
      id: relative_humidity
      accuracy_decimals: 0
      icon: "mdi:water-percent"
      internal: false
      web_server:
        sorting_group_id: environment_values
  - platform: absolute_humidity
    name: "Absolute Humidity"
    temperature: temperature
    humidity: relative_humidity
    id: absolute_hum
    internal: false
    web_server:
      sorting_group_id: environment_values
# === Pressure Sensor ===
# === ADC Sensor: Reads the raw voltage from the pressure transducer ===
# === RAW ADC SENSORS (voltage representation) ===
  - platform: adc
    pin: GPIO00
    name: "Sensor Volts (Raw)"
    id: pressure_volts_1
    icon: "mdi:lightning-bolt"
    accuracy_decimals: 3
    attenuation: 11db
    update_interval: 1s
    filters:
      - sliding_window_moving_average:
          window_size: 30
          send_every: 10
      - delta: 0.01
      - filter_out: nan
    web_server:
      sorting_group_id: config_settings
  - platform: template
    name: "Pressure (kPa)"
    id: pressure_kpa_1
    unit_of_measurement: "kPa"
    icon: "mdi:gauge"
    accuracy_decimals: 1
    update_interval: 1s
    lambda: |-
      // 1.6 MPa (1600 kPa) sensor powered at 3.3V with 0.33-2.97V output:
      // Pressure (kPa) ‚âà (Voltage - 0.33) * 606.0606
      float kpa = (id(pressure_volts_1).state - id(offset_volts)) * 606.0606;
      if (kpa < 0.0) return 0.0;
      return kpa;
    filters:
      - exponential_moving_average:
          alpha: 0.1
    web_server:
      sorting_group_id: pressure_values
  - platform: template
    name: "Pressure (psi)"
    id: pressure_psi
    device_class: pressure
    update_interval: 1s
    unit_of_measurement: 'psi'
    icon: "mdi:gauge"
    accuracy_decimals: 0
    lambda: |-
      // 1 kPa = 0.145038 PSI
      // Output voltage range at 3.3V: 0.33V to 2.97V
      // Pressure range: 0 to 232 PSI
      // Pressure (psi) ‚âà ((Voltage - 0.33) / (2.97 - 0.33)) * 232 OR Pressure (psi) ‚âà (Voltage-0.33) * 93.2203
      float kpa = id(pressure_kpa_1).state;
      float psi = kpa * 0.145038;
      if (psi < 0.0) return 0.0;
      return psi;
    filters:
      - exponential_moving_average:
          alpha: 0.1
    web_server:
      sorting_group_id: pressure_values

# === Other Sensors ===
  - platform: uptime
    name: "Uptime"
    id: uptime_s
    update_interval: 5s
  - platform: internal_temperature
    name: "Internal Temperature"
    id: "internal_temperature_f"
    unit_of_measurement: "¬∞F"
    icon: "mdi:temperature-fahrenheit"
    accuracy_decimals: 0
    device_class: "temperature"
    state_class: "measurement"
    filters:
      - lambda: return x * (9.0/5.0) + 32.0; # Convert Celsius to Fahrenheit
      - filter_out: nan
  - platform: template
    name: "Current Pressure"
    id: pressure_value_1
    unit_of_measurement: 'psi'
    icon: "mdi:gauge"
    accuracy_decimals: 0
    lambda: |-
      return id(pressure_psi).state;
    on_value:
      then:
        - globals.set:
            id: current_pressure
            value: !lambda 'return x;'
    update_interval: 5s
    internal: true
    web_server:
      sorting_group_id: status_settings
  - platform: template
    name: "Active Temp Comp Factor"
    id: temp_comp_active_display
    icon: "mdi:thermometer"
    accuracy_decimals: 3
    lambda: |-
      return id(temp_comp_factor);
    update_interval: 30s
    web_server:
      sorting_group_id: config_settings

# === Switches ===
switch:
  - platform: restart
    icon: mdi:reload-alert
    name: "Restart" # Manual restart switch
  - platform: template
    name: "Night Mode (LED Sleep)"
    id: led_night_mode
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    icon: "mdi:weather-night"
    entity_category: "config"
    web_server:
      sorting_group_id: config_settings
  - platform: template
    name: "OLED Display"
    id: oled_display_sw
    icon: mdi:monitor
    optimistic: True
    restore_mode: ALWAYS_ON
    on_turn_on:
      - lambda: id(oled_display).turn_on();
    on_turn_off:
      - lambda: id(oled_display).turn_off();
    web_server:
      sorting_group_id: config_settings
  - platform: template
    name: " Power Switch"
    id: power_switch
    icon: "mdi:power"
    optimistic: True
    restore_mode: RESTORE_DEFAULT_OFF
    turn_on_action:
      - logger.log: "Power Turned On!"
      - light.turn_on: 
          id: onboard_led
          brightness: 25%
          effect: "Solid Green"
      - switch.turn_on: oled_display_sw
    turn_off_action:
      - logger.log: "Power Turned Off!"
      - light.turn_on:
          id: onboard_led
          brightness: 25%
          effect: "Solid Red"
      - switch.turn_off: oled_display_sw
    web_server:
      sorting_group_id: config_settings

# === Text Sensors ===
text_sensor:
  - platform: template
    name: " Pressure Status"
    id: pressure_status_1
    icon: "mdi:earth"
    lambda: |-
      if ((id(pressure_psi).state >= 42) && (id(pressure_psi).state <= 52)) {
        return {"Ok"};
      } else if (id(pressure_psi).state <= 35) {
        return {"Too Low"};
      } else if ((id(pressure_psi).state > 35) && (id(pressure_psi).state < 42)) {
        return {"Low"};
      } else if (id(pressure_psi).state > 52 && id(pressure_psi).state <= 54) {
        return {"High"};
      } else if (id(pressure_psi).state > 54) {
        return {"Too High"};
      } else {
        return {"Ok"};
      }
    update_interval: 5s
    web_server:
      sorting_group_id: alert_status
  - platform: template
    name: "Pressure Threshold Range"
    id: pressure_threshold_range
    update_interval: 10s
    lambda: |-
      char buffer[32];
      snprintf(buffer, sizeof(buffer), "%.1f‚Äì%.1f psi", id(pressure_min_threshold).state, id(pressure_max_threshold).state);
      return {buffer};
    icon: "mdi:gauge"
    entity_category: diagnostic
    web_server:
      sorting_group_id: config_settings
  - platform: template
    name: "Compensation Source"
    id: temp_comp_source
    lambda: |-
      uint32_t now = millis() / 1000;
      uint32_t elapsed = now - id(last_manual_adjustment_time);
      if (elapsed < 300) {
        return {"Manual"};
      } else {
        return {"Auto"};
      }
    update_interval: 30s
    icon: "mdi:swap-horizontal"
    web_server:
      sorting_group_id: config_settings
  - platform: template
    name: "Uptime (formatted)"
    icon: "mdi:timer-outline"
    entity_category: "diagnostic"
    lambda: |-
      uint32_t dur = id(uptime_s).state;
      uint32_t dys = 0;
      uint32_t hrs = 0;
      uint32_t mnts = 0;
      if (dur >= 86400) {
        dys = dur / 86400;
        dur %= 86400;
      }
      if (dur >= 3600) {
        hrs = dur / 3600;
        dur %= 3600;
      }
      if (dur >= 60) {
        mnts = dur / 60;
        dur %= 60;
      }
      char buffer[32];  // Increased size to handle larger strings safely
      snprintf(buffer, sizeof(buffer), "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    update_interval: 5s
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      icon: "mdi:ip"
    ssid:
      name: "Connected SSID"
      icon: "mdi:wifi"
  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true
    
# === Intervals ===
interval:
  - interval: 10s
    then:
      - display.page.show_next: oled_display
      - component.update: oled_display
  - interval: 15s
    then:
      - lambda: |-
          float upper_threshold_psi = id(upper_psi_threshold);
          float lower_threshold_psi = id(lower_psi_threshold);
          float is_pressure = id(pressure_psi).state;
          bool is_pressure_above_upper = is_pressure > upper_threshold_psi;
          bool is_pressure_below_lower = is_pressure <= lower_threshold_psi;
          // Pressure Monitor Logic
          if (is_pressure_above_upper) {
            ESP_LOGW("pressure logic", "Pressure is above the upper threshold; turn off the pump immediately and check.");
            } else if (is_pressure_below_lower) {
            ESP_LOGW("pressure logic", "Pressure is below the lower threshold; check the pump.");
            } else if (!is_pressure_below_lower && !is_pressure_above_upper) {
            ESP_LOGW("pressure logic", "Pressure is in the normal range.");
          }
  - interval: 30s
    then:
      - lambda: |-
          if (!id(temperature).has_state()) return;
          uint32_t current_time = millis() / 1000;
          uint32_t time_since_manual = current_time - id(last_manual_adjustment_time);
          const uint32_t cooldown = 300; // seconds (5 minutes)
          if (time_since_manual < cooldown) {
            ESP_LOGI("temp_comp", "Skipping auto-adjust; last manual adjustment was %u seconds ago.", time_since_manual);
            return;
          }
          float temp = id(temperature).state;
          float auto_comp = 0.05 - (temp - 70.0f) * 0.00075;
          auto_comp = std::max(-0.2f, std::min(0.2f, auto_comp));  // Clamp to slider range
          id(auto_temp_comp_factor) = auto_comp;
          id(temp_comp_factor) = auto_comp;
          ESP_LOGI("temp_comp", "[AUTO] Adjusted to %.3f (Temp: %.1f¬∞F, last manual %us ago)", auto_comp, temp, time_since_manual);
  - interval: 1min
    then:
      - lambda: |-
          auto now = id(sntp_time).now();
          if (!now.is_valid()) return;
          int hour = now.hour;
          int minute = now.minute;
          bool led_sleep_enabled = id(led_night_mode).state;
          bool night = (hour >= 22 || hour < 6 || (hour == 6 && minute < 30));
          if (night && led_sleep_enabled) {
            auto call = id(onboard_led).turn_off();
            call.perform();
          }
  - interval: 15s
    then:
      - lambda: |-
          // Check if night mode is active and enabled
          auto now = id(sntp_time).now();
          bool led_sleep_enabled = id(led_night_mode).state;
          bool is_night = false;
          if (now.is_valid()) {
            int hour = now.hour;
            int minute = now.minute;
            is_night = (hour >= 22 || hour < 6 || (hour == 6 && minute < 30));
          }
          if (led_sleep_enabled && is_night) {
            // It's night mode and enabled: skip LED update
            ESP_LOGI("led_logic", "Night mode is active; skipping LED color logic.");
            auto call = id(onboard_led).turn_off();
            call.perform();
            return;
          }
          // Otherwise, update LED as normal
          float p = id(pressure_psi).state;
          float pressure = p;
          ESP_LOGI("led_logic", "Pressure: %.1f", pressure);
          auto call = id(onboard_led).make_call();
          call.set_state(true);
          call.set_brightness(0.5);  // moderate brightness
          // if (pressure >= 50.0) {
          //   call.set_effect("Blink Red");
          // } else if (pressure >= 40.0) {
          //   call.set_effect("Solid Green");
          // } else if (pressure >= 6.0) {
          //   call.set_effect("Blink Yellow");
          // } else {
          //   call.set_effect("Solid Blue");
          // }
          call.perform();
  - interval: 10s
    then:
      - if:
          condition:
            or:
              - binary_sensor.is_on: pressure_alert
          then:
            - light.turn_on:
                id: onboard_led
                effect: "Blink Blue"
                brightness: 50%
          else:
            - light.turn_on:
                id: onboard_led
                effect: "Solid Green"
                brightness: 30%
