#**************************************************************
#  PROJECT:            Pumphouse Monitor
#  DEVICE/BOARD:       ESP32-C3 (esp32-c3-devkitm-1)
#  VERSION:            1.1.0
#  AUTHOR:             John Camm
#  LAST UPDATED:       2025-06-12
#**************************************************************
#  DESCRIPTION
#    ESPHome-based pumphouse environment monitor with dual analog
#    pressure sensors, temp/humidity sensing, OLED dashboard, RGB
#    status LED, user-adjustable temp compensation, LED night mode,
#    SNTP time sync, and web interface for calibration/settings.
#
#**************************************************************
#  SENSOR & FEATURE SPECIFICATIONS
#    - [Pressure Transducer - SEN0257]
#      - Range: 0–1.6 MPa (1600 kPa / 232 PSI); configured for 0–100 PSI
#      - Output: 0.5–4.5V @ 5V (scaled to ~0.33–2.97V @ 3.3V)
#      - Accuracy: ±0.5%–1% FS
#      - Connection: ADC (GPIO0, GPIO4)
#    - [Temp/Humidity - SHT30]
#      - Range: -20°C to 100°C; 0–100% RH
#      - Interface: I²C (GPIO2: SDA, GPIO3: SCL, addr 0x44)
#    - [OLED Display - SSD1306]
#      - 128x64 mono, I²C (GPIO2/3), addr 0x3C, 3.3V powered
#    - [Onboard Neopixel RGB LED]
#      - WS2811/GRB, GPIO8, visual alerts, sleep mode (10pm–6am)
#
#**************************************************************
#  GPIO PIN ASSIGNMENTS
#  -------------------------------------------------------------------
#    GPIO    |   Function / Peripheral
#  ----------|--------------------------------------------------------
#    GPIO0   |   Pressure Sensor 1 (ADC)
#    GPIO4   |   Pressure Sensor 2 (ADC)
#    GPIO2   |   I²C SDA (OLED, SHT30)
#    GPIO3   |   I²C SCL (OLED, SHT30)
#    GPIO8   |   Onboard Neopixel RGB LED
#  -------------------------------------------------------------------
#
#  - I²C bus shared by SHT30 and OLED. All sensors powered from 3.3V.
#
#**************************************************************
#  CHANGELOG
#    [v1.1.0] - 2025-06-12
#      - Added user-configurable "LED Night Mode" (10:00pm–6:00am).
#      - Web UI control for LED sleep.
#    [v1.0.0] - 2025-06-06
#      - Initial release: dual pressure, temp/humidity, calibration UI, OLED, RGB LED, SNTP, web UI.
#**************************************************************

# === ESPHome Core Configuration ===
esphome:
  name: "pumphouse"
  friendly_name: "pumphouse monitor"
  comment: Pressure and Temperature (esp32-c3)

# === Hardware Details ===
esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# === Logging Configuration ===
# Enable logging to monitor the device's behavior.
logger:
  level: WARN

# === Remote API and OTA Update Support ===
api:
  encryption:
    key: ""
ota:
  - platform: esphome
    password: !secret password

# === Wifi and Fallback Hotspot Configuration ===
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "pumphouse"
    password: !secret password

# === Captive Portal ===
# For fallback access when not connected to Wi-Fi.
captive_portal:

# === Web Server ===
web_server:
  version: 3
  auth:
    username: !secret username
    password: !secret password
  sorting_groups:
    - id: pressure_values_1
      name: "Pressure Sensor 1"
      sorting_weight: -35
    - id: pressure_values_2
      name: "Pressure Sensor 2"
      sorting_weight: -30
    - id: environment_values
      name: "Environment"
      sorting_weight: -25
    - id: config_settings
      name: "Config"
      sorting_weight: -10
    - id: state_settings
      name: "Status"
      sorting_weight: -10

# === Time Configuration ===
time:
  - platform: sntp
    id: sntp_time
    timezone: America/New_York
    servers:
     - 0.pool.ntp.org
     - 1.pool.ntp.org
     - 2.pool.ntp.org

# === Global Variables ===
globals:
  - id: temp_comp_factor
    type: float
    restore_value: false
    initial_value: '0.050'
  - id: auto_temp_comp_factor
    type: float
    initial_value: '0.050'
    restore_value: false
  - id: last_manual_adjustment_time
    type: uint32_t
    restore_value: false
    initial_value: '0'
  - id: offset_volts_1
    type: float
    restore_value: false
    initial_value: '0.331'
  - id: offset_volts_2
    type: float
    restore_value: false
    initial_value: '0.326'
  - id: upper_psi_threshold
    type: float
    restore_value: true
    initial_value: '55.0'
  - id: lower_psi_threshold
    type: float
    restore_value: true
    initial_value: '45.0'
  - id: current_pressure_1
    type: float
    restore_value: false
    initial_value: '40.0'
  - id: current_pressure_2
    type: float
    restore_value: false
    initial_value: '40.0'
  - id: led_night_mode_state
    type: bool
    restore_value: true
    initial_value: 'true'

# === Adjustable Factors and Offsets ===
number:
  - platform: template
    name: "Temperature Compensation Factor"
    id: temp_comp_number
    icon: "mdi:thermometer"
    min_value: -0.200
    max_value: 0.200
    step: 0.005
    initial_value: 0.050
    optimistic: true
    internal: true
    mode: slider
    set_action:
      then:
        - lambda: |-
            id(temp_comp_factor) = x;
            id(last_manual_adjustment_time) = millis() / 1000;
            ESP_LOGI("temp_comp", "[MANUAL] Slider set to %.3f", x);
    web_server:
      sorting_group_id: config_settings
  - platform: template
    name: "Sensor 1 Offset Volts"
    id: offset_volts_number_1
    icon: "mdi:lightning-bolt"
    min_value: -0.600
    max_value: 0.600
    step: 0.001
    initial_value: 0.331
    optimistic: true
    internal: true
    mode: slider
    set_action:
      then:
        - lambda: |-
            id(offset_volts_1) = x;
    web_server:
      sorting_group_id: config_settings
  - platform: template
    name: "Sensor 2 Offset Volts"
    id: offset_volts_number_2
    icon: "mdi:lightning-bolt"
    min_value: -0.600
    max_value: 0.600
    step: 0.001
    initial_value: 0.326
    optimistic: true
    internal: true
    mode: slider
    set_action:
      then:
        - lambda: |-
            id(offset_volts_2) = x;
    web_server:
      sorting_group_id: config_settings

# === i2c Sensors and Display ===
i2c:
  sda: 2
  scl: 3
  scan: true
  id: bus_a
  frequency: 800kHz
  timeout: 10ms

# === Binary Sensors ===
# Status monitoring and heater state.
binary_sensor:
  - platform: status
    name: "Status" # Device online/offline status
    icon: "mdi:state-machine"

# === Buttons ===
button:
  - platform: template
    name: "Calibrate Pressure 1 to Zero"
    icon: "mdi:target-variant"
    on_press:
      then:
        - lambda: |-
            id(offset_volts_1) = id(pressure_volts_1).state;
            ESP_LOGI("calibration", "Calibrated Pressure 1: Zero offset set to %.3f", id(offset_volts_1));
    web_server:
      sorting_group_id: config_settings
  - platform: template
    name: "Calibrate Pressure 2 to Zero"
    icon: "mdi:target-variant"
    on_press:
      then:
        - lambda: |-
            id(offset_volts_2) = id(pressure_volts_2).state;
            ESP_LOGI("calibration", "Calibrated Pressure 2: Zero offset set to %.3f", id(offset_volts_2));
    web_server:
      sorting_group_id: config_settings

# === Intervals ===
# Run actions at fixed time intervals
interval:
  - interval: 5s
    then:
      - display.page.show_next: oled_display
      - component.update: oled_display
  - interval: 15s
    then:
      - lambda: |-
          float upper_threshold_psi = id(upper_psi_threshold);
          float lower_threshold_psi = id(lower_psi_threshold);
          float is_pressure_1 = id(pressure_psi_1).state;
          float is_pressure_2 = id(pressure_psi_2).state;
          bool is_pressure_1_above_upper = is_pressure_1 > upper_threshold_psi;
          bool is_pressure_2_above_upper = is_pressure_2 > upper_threshold_psi;
          bool is_pressure_1_below_lower = is_pressure_1 <= lower_threshold_psi;
          bool is_pressure_2_below_lower = is_pressure_2 <= lower_threshold_psi;
          // Pressure 1 Monitor Logic
          if (is_pressure_1_above_upper) {
            ESP_LOGW("pressure logic", "Pressure 1 is above 55psi; turn off the pump immediately and check.");
            } else if (is_pressure_1_below_lower) {
            ESP_LOGW("pressure logic", "Pressure 1 is below 45psi; check the pump.");
            } else if (!is_pressure_1_below_lower && !is_pressure_1_above_upper) {
            ESP_LOGW("pressure logic", "Pressure 1 is in the normal range of 45-55psi.");
          }
          // Pressure 2 Monitor Logic
          if (is_pressure_2_above_upper) {
            ESP_LOGW("pressure logic", "Pressure 2 is above 55psi; turn off the pump immediately and check.");
            } else if (is_pressure_2_below_lower) {
            ESP_LOGW("pressure logic", "Pressure 2 is below 45psi; check the pump.");
            } else if (!is_pressure_2_below_lower && !is_pressure_1_above_upper) {
            ESP_LOGW("pressure logic", "Pressure 2 is in the normal range of 45-55psi.");
          } 
  - interval: 30s
    then:
      - lambda: |-
          if (!id(temperature).has_state()) return;
          uint32_t current_time = millis() / 1000;
          uint32_t time_since_manual = current_time - id(last_manual_adjustment_time);
          const uint32_t cooldown = 300; // seconds (5 minutes)
          if (time_since_manual < cooldown) {
            ESP_LOGI("temp_comp", "Skipping auto-adjust; last manual adjustment was %u seconds ago.", time_since_manual);
            return;
          }
          float temp = id(temperature).state;
          float auto_comp = 0.05 - (temp - 70.0f) * 0.00075;
          auto_comp = std::max(-0.2f, std::min(0.2f, auto_comp));  // Clamp to slider range
          id(auto_temp_comp_factor) = auto_comp;
          id(temp_comp_factor) = auto_comp;
          ESP_LOGI("temp_comp", "[AUTO] Adjusted to %.3f (Temp: %.1f°F, last manual %us ago)", auto_comp, temp, time_since_manual);
  - interval: 1min
    then:
      - lambda: |-
          auto now = id(sntp_time).now();
          if (!now.is_valid()) return;
          int hour = now.hour;
          int minute = now.minute;
          bool led_sleep_enabled = id(led_night_mode).state;
          bool night = (hour >= 22 || hour < 6 || (hour == 6 && minute < 30));
          if (night && led_sleep_enabled) {
            auto call = id(onboard_led).turn_off();
            call.perform();
          }
  - interval: 15s
    then:
      - lambda: |-
          // Check if night mode is active and enabled
          auto now = id(sntp_time).now();
          bool led_sleep_enabled = id(led_night_mode).state;
          bool is_night = false;
          if (now.is_valid()) {
            int hour = now.hour;
            int minute = now.minute;
            is_night = (hour >= 22 || hour < 6 || (hour == 6 && minute < 30));
          }
          if (led_sleep_enabled && is_night) {
            // It's night mode and enabled: skip LED update
            ESP_LOGI("led_logic", "Night mode is active; skipping LED color logic.");
            auto call = id(onboard_led).turn_off();
            call.perform();
            return;
          }
          // Otherwise, update LED as normal
          float p1 = id(pressure_psi_1).state;
          float p2 = id(pressure_psi_2).state;
          float pressure = (p1 + p2) / 2.0;
          ESP_LOGI("led_logic", "Pressure 1: %.1f, Pressure 2: %.1f, Avg: %.1f", p1, p2, pressure);
          auto call = id(onboard_led).make_call();
          call.set_state(true);
          call.set_brightness(0.5);  // moderate brightness
          if (pressure >= 50.0) {
            call.set_effect("Red");
          } else if (pressure >= 40.0) {
            call.set_effect("Green");
          } else if (pressure >= 6.0) {
            call.set_effect("Yellow");
          } else {
            call.set_effect("Blue");
          }
          call.perform();

# === Light Output ===
# Onboard RGB LED
light:
  - platform: neopixelbus
    type: GRB
    variant: WS2811
    icon: "mdi:led-strip"
    pin: GPIO08
    id: onboard_led
    num_leds: 1
    name: "Onboard LED"
    restore_mode: ALWAYS_ON
    on_turn_on:
      then:
        - light.control:
            brightness: 50%
            id: onboard_led
            effect: Green
    effects:
      - addressable_color_wipe:
          name: Red
          colors:
            - red: 100%
              green: 0%
              blue: 0%
              num_leds: 1
          reverse: false
      - addressable_color_wipe:
          name: Green
          colors:
            - red: 0%
              green: 100%
              blue: 0%
              num_leds: 1
          reverse: false
      - addressable_color_wipe:
          name: Blue
          colors:
            - red: 0%
              green: 0%
              blue: 100%
              num_leds: 1
          reverse: false
      - addressable_color_wipe:
          name: White
          colors:
            - red: 100%
              green: 100%
              blue: 100%
              num_leds: 1
          reverse: false
      - addressable_color_wipe:
          name: Yellow
          colors:
            - red: 100%
              green: 100%
              blue: 0%
              num_leds: 1
          reverse: false
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
          min_brightness: 0%
          max_brightness: 50%
      - pulse:
          name: "Slow Pulse"
          transition_length: 1s
          update_interval: 2s
          min_brightness: 0%
          max_brightness: 50%
      - pulse:
          name: "Blink"
          transition_length: 0.5s
          update_interval: 0.5s
          min_brightness: 10%
          max_brightness: 40%

# ==== OLED Configuration ===
font:
  - file: 'fonts/arial.ttf'
    id: arial_medium
    size: 14
  - file: "fonts/OpenSans-Regular.ttf"
    id: opensans_medium
    size: 12
  - file: "fonts/OpenSans-Regular.ttf"
    id: opensans_small
    size: 10
  - file: "gfonts://Roboto" # gfonts://family[@weight]
    id: roboto
    size: 20
  - file: "gfonts://Roboto"
    id: roboto_medium
    size: 15
  - file: "gfonts://Roboto"
    id: roboto_small
    size: 12
  - file: "gfonts://Roboto"
    id: roboto_smallest
    size: 10
  - file: 'fonts/BebasNeue-Regular.ttf'
    id: bebasneue_large
    size: 48
  - file: 'fonts/BebasNeue-Regular.ttf'
    id: bebasneue_medium
    size: 32
  - file: 'fonts/Silkscreen-Regular.ttf'
    id: silkscreen_medium
    size: 10
  - file: 'fonts/Silkscreen-Regular.ttf'
    id: silkscreen_small
    size: 8
  - file: 'fonts/arial.ttf'
    id: arial_large
    size: 16

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    i2c_id: bus_a
    id: oled_display
    auto_clear_enabled: True
    show_test_card: false
    update_interval: 5s
    pages:
      - id: page1 
        lambda: |-
          // it.printf(X, Y,.. (X (Row) and Y (Column)) 
          // Print "pumphouse" in top center.
          it.printf(it.get_width() / 2, 8, id(roboto_medium), TextAlign::TOP_CENTER, "pumphouse");
          // Print time in HH:MM format
          it.strftime(0, 60, id(bebasneue_large), TextAlign::BASELINE_LEFT, "%H:%M", id(sntp_time).now());
          // Print Temperature
          if (id(temperature).has_state()) {
          it.printf(127, 23, id(arial_medium), TextAlign::TOP_RIGHT, "%.1f°", id(temperature).state);
          }
          // Print Relative humidity
          if (id(relative_humidity).has_state()) {
          it.printf(127, 60, id(arial_medium), TextAlign::BASELINE_RIGHT, "%.1f°", id(relative_humidity).state);
          }
      - id: page2
        lambda: |-
          // Print "Temperature" in top center.
          it.printf(it.get_width() / 2, 8, id(roboto_medium), TextAlign::TOP_CENTER, "Temperature");
          // Print Temperature
          if (id(temperature).has_state()) {
          it.printf(it.get_width() / 2, it.get_height() - 4, id(bebasneue_large), TextAlign::BASELINE_CENTER, "%.1f°", id(temperature).state);
          }
      - id: page3
        lambda: |-
          // Print "Relative Humidity" in top center.
          it.printf(it.get_width() / 2, 8, id(roboto_medium), TextAlign::TOP_CENTER, "Relative Humidity");
          // Print Relative humidity
          if (id(relative_humidity).has_state()) {
          it.printf(it.get_width() / 2, it.get_height() - 4, id(bebasneue_large), TextAlign::BASELINE_CENTER, "%.1f°", id(relative_humidity).state);
          }
      - id: page4
        lambda: |-
          // Print "Absolute Humidity" in top center.
          it.printf(it.get_width() / 2, 8, id(roboto_medium), TextAlign::TOP_CENTER, "Absolute Humidity");
          // Print Absolute humidity
          if (id(absolute_hum).has_state()) {
          it.printf(it.get_width() / 2, it.get_height() - 4, id(bebasneue_large), TextAlign::BASELINE_CENTER, "%.1f°", id(absolute_hum).state);
          }
      - id: page5
        lambda: |-
          // Print "Pressure 1" in top center.
          it.printf(it.get_width() / 2, 8, id(roboto_medium), TextAlign::TOP_CENTER, "Pressure 1");
          // Print Pressure 1
          if (id(pressure_psi_1).has_state()) {
          it.printf(it.get_width() / 2, it.get_height() - 4, id(bebasneue_large), TextAlign::BASELINE_CENTER, "%.0f°", id(pressure_psi_1).state);
          }
      - id: page6
        lambda: |-
          // Print "Pressure 2" in top center.
          it.printf(it.get_width() / 2, 8, id(roboto_medium), TextAlign::TOP_CENTER, "Pressure 2");
          // Print Pressure 2
          if (id(pressure_psi_2).has_state()) {
          it.printf(it.get_width() / 2, it.get_height() - 4, id(bebasneue_large), TextAlign::BASELINE_CENTER, "%.0f°", id(pressure_psi_2).state);
          }
      - id: page7
        lambda: |-
          // Print "Temp Compensation" in top center.
          it.printf(it.get_width() / 2, 8, id(roboto_medium), TextAlign::TOP_CENTER, "Temp Comp");
          // Print Temp Compensation
          if (!id(temp_comp_source).state.empty()) {
          it.printf(it.get_width() / 2, it.get_height() - 4, id(bebasneue_large), TextAlign::BASELINE_CENTER, "%s", id(temp_comp_source).state.c_str());
          }
      - id: page8
        lambda: |-
          // Print "Temp Comp Factor" in top center.
          it.printf(it.get_width() / 2, 8, id(roboto_medium), TextAlign::TOP_CENTER, "Comp Factor");
          // Print Temp Comp Factor
          if (id(pressure_psi_2).has_state()) {
          it.printf(it.get_width() / 2, it.get_height() - 4, id(bebasneue_large), TextAlign::BASELINE_CENTER, "%.3f", id(temp_comp_factor));
          }

# === Sensors ===
# Monitoring uptime, temperatures, and pressure.
# === SHT-30 Sensors ===
# Configure temperature and humidity sensors
sensor:
  - platform: sht3xd
    address: 0x44
    i2c_id: bus_a    
    update_interval: 10s
    temperature:
      name: "Temperature"
      id: temperature
      icon: "mdi:thermometer"
      device_class: "temperature"
      accuracy_decimals: 1
      filters:
        - throttle: 1s
        - heartbeat: 5s
        - debounce: 0.1s
        - filter_out: nan
        - delta: 5.0
        - lambda: return x * (9.0/5.0) + 32.0; # Convert Celsius to Fahrenheit
      unit_of_measurement: "°F"
      internal: false
      web_server:
        sorting_group_id: environment_values
    humidity:
      name: "Relative Humidity"
      id: relative_humidity
      accuracy_decimals: 0
      icon: "mdi:water-percent"
      internal: false
      web_server:
        sorting_group_id: environment_values
  - platform: absolute_humidity
    name: "Absolute Humidity"
    temperature: temperature
    humidity: relative_humidity
    id: absolute_hum
    internal: false
    web_server:
      sorting_group_id: environment_values
# === Pressure Sensor ===
# Configure pressure sensor
# === ADC Sensor: Reads the raw voltage from the pressure transducer ===
# === RAW ADC SENSORS (voltage representation) ===
## Pressure: raw
  - platform: adc
    pin: GPIO00
    name: "Sensor 1 Volts (Raw)"
    id: pressure_volts_1
    icon: "mdi:lightning-bolt"
    accuracy_decimals: 3
    attenuation: auto
    update_interval: 1s
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 5
    web_server:
      sorting_group_id: config_settings
  - platform: template
    name: "Pressure 1 (kPa)"
    id: pressure_kpa_1
    unit_of_measurement: "kPa"
    icon: "mdi:gauge"
    accuracy_decimals: 2
    update_interval: 1s
    lambda: |-
      // 1.6 MPa (1600 kPa) sensor powered at 3.3V with 0.33-2.97V output:
      // Pressure (kPa) ≈ (Voltage - 0.33) * 606.0606
      float kpa = (id(pressure_volts_1).state - id(offset_volts_1)) * 606.0606;
      if (kpa < 0.00) return 0.00;
      return kpa;
    web_server:
      sorting_group_id: pressure_values_1
  - platform: template
    name: "Pressure 1 (psi)"
    id: pressure_psi_1
    device_class: pressure
    update_interval: 1s
    unit_of_measurement: 'psi'
    icon: "mdi:gauge"
    accuracy_decimals: 0
    lambda: |-
      // 1 kPa = 0.145038 PSI
      // Output voltage range at 3.3V: 0.33V to 2.97V
      // Pressure range: 0 to 232 PSI
      // Pressure (psi) ≈ ((Voltage - 0.33) / (2.97 - 0.33)) * 232 OR Pressure (psi) ≈ (Voltage-0.33) * 93.2203
      float kpa = id(pressure_kpa_1).state;
      float psi = kpa * 0.145038;
      if (psi < 0.0) return 0.0;
      return psi;
    web_server:
      sorting_group_id: pressure_values_1
  - platform: adc
    pin: GPIO04
    name: "Sensor 2 Volts (Raw)"
    id: pressure_volts_2
    icon: "mdi:lightning-bolt"
    accuracy_decimals: 3
    attenuation: auto
    update_interval: 1s
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 5
    web_server:
      sorting_group_id: config_settings
  - platform: template
    name: "Pressure 2 (kPa)"
    id: pressure_kpa_2
    unit_of_measurement: "kPa"
    icon: "mdi:gauge"
    accuracy_decimals: 2
    update_interval: 1s
    lambda: |-
      // 1.6 MPa (1600 kPa) sensor powered at 3.3V with 0.33-2.97V output:
      // Pressure (kPa) ≈ (Voltage - 0.33) * 606.0606
      float kpa = (id(pressure_volts_2).state - id(offset_volts_2)) * 606.0606;
      if (kpa < 0.00) return 0.00;
      return kpa;
    web_server:
      sorting_group_id: pressure_values_2
  - platform: template
    name: "Pressure 2 (psi)"
    id: pressure_psi_2
    device_class: pressure
    update_interval: 1s
    unit_of_measurement: 'psi'
    icon: "mdi:gauge"
    accuracy_decimals: 0
    lambda: |-
      // 1 kPa = 0.145038 PSI
      // Output voltage range at 3.3V: 0.33V to 2.97V
      // Pressure range: 0 to 232 PSI
      // Pressure (psi) ≈ ((Voltage - 0.33) / (2.97 - 0.33)) * 232 OR Pressure (psi) ≈ (Voltage-0.33) * 93.2203
      float kpa = id(pressure_kpa_2).state;
      float psi = kpa * 0.145038;
      if (psi < 0.0) return 0.0;
      return psi;
    web_server:
      sorting_group_id: pressure_values_2

# === Other Sensors ===
# Configure uptime, internal temp, and other sensors
  - platform: uptime
    name: "Uptime"
    id: uptime_s
    update_interval: 5s
  - platform: internal_temperature
    name: "Internal Temperature" # ESP32 internal temperature in °F
    id: "internal_temperature_f"
    unit_of_measurement: "°F"
    icon: "mdi:temperature-fahrenheit"
    accuracy_decimals: 0
    device_class: "temperature"
    state_class: "measurement"
    filters:
      - lambda: return x * (9.0/5.0) + 32.0; # Convert Celsius to Fahrenheit
      - filter_out: nan
  - platform: template
    name: "Current Pressure 1"
    id: pressure_value_1
    unit_of_measurement: 'psi'
    icon: "mdi:gauge"
    accuracy_decimals: 0
    lambda: |-
      return id(pressure_psi_1).state;
    on_value:
      then:
        - globals.set:
            id: current_pressure_1
            value: !lambda 'return x;'
    update_interval: 5s
    internal: true
    web_server:
      sorting_group_id: state_settings
  - platform: template
    name: "Current Pressure 2"
    id: pressure_value_2
    unit_of_measurement: 'psi'
    icon: "mdi:gauge"
    accuracy_decimals: 0
    lambda: |-
      return id(pressure_psi_2).state;
    on_value:
      then:
        - globals.set:
            id: current_pressure_2
            value: !lambda 'return x;'
    update_interval: 5s
    internal: true
    web_server:
      sorting_group_id: state_settings
  - platform: template
    name: "Active Temp Comp Factor"
    id: temp_comp_active_display
    icon: "mdi:thermometer"
    accuracy_decimals: 3
    lambda: |-
      return id(temp_comp_factor);
    update_interval: 30s
    web_server:
      sorting_group_id: config_settings

# === Switches ===
# Control switches for various functions.
switch:
  - platform: restart
    icon: mdi:reload-alert
    name: "Restart" # Manual restart switch
  - platform: template
    name: "Night Mode (LED Sleep)"
    id: led_night_mode
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    icon: "mdi:weather-night"
    entity_category: "config"
    web_server:
      sorting_group_id: config_settings

# === Text Sensors ===
text_sensor:
  - platform: template
    name: " Pressure 1 Status"
    id: pressure_status_1
    icon: "mdi:earth"
    lambda: |-
      if ((id(pressure_psi_1).state >= 45) && (id(pressure_psi_1).state <= 55)) {
        return {"Ok"};
      } else if (id(pressure_psi_1).state <= 35) {
        return {"Too Low"};
      } else if ((id(pressure_psi_1).state > 35) && (id(pressure_psi_1).state < 45)) {
        return {"Low"};
      } else if (id(pressure_psi_1).state > 55 && id(pressure_psi_1).state <= 58) {
        return {"High"};
      } else if (id(pressure_psi_1).state > 58) {
        return {"Too High"};
      } else {
        return {"Ok"};
      }
    update_interval: 5s
    web_server:
      sorting_group_id: pressure_values_1
  - platform: template
    name: " Pressure 2 Status"
    id: pressure_status_2
    icon: "mdi:earth"
    lambda: |-
      if ((id(pressure_psi_2).state >= 45) && (id(pressure_psi_2).state <= 55)) {
        return {"Ok"};
      } else if (id(pressure_psi_2).state <= 35) {
        return {"Too Low"};
      } else if ((id(pressure_psi_2).state > 35) && (id(pressure_psi_2).state < 45)) {
        return {"Low"};
      } else if (id(pressure_psi_2).state > 55 && id(pressure_psi_2).state <= 58) {
        return {"High"};
      } else if (id(pressure_psi_2).state > 58) {
        return {"Too High"};
      } else {
        return {"Ok"};
      }
    update_interval: 5s
    web_server:
      sorting_group_id: pressure_values_2
  - platform: template
    name: "Compensation Source"
    id: temp_comp_source
    lambda: |-
      uint32_t now = millis() / 1000;
      uint32_t elapsed = now - id(last_manual_adjustment_time);
      if (elapsed < 300) {
        return {"Manual"};
      } else {
        return {"Auto"};
      }
    update_interval: 30s
    icon: "mdi:swap-horizontal"
    web_server:
      sorting_group_id: config_settings
  - platform: template
    name: "Uptime (formatted)"
    icon: "mdi:timer-outline"
    entity_category: "diagnostic"
    lambda: |-
      uint32_t dur = id(uptime_s).state;
      uint32_t dys = 0;
      uint32_t hrs = 0;
      uint32_t mnts = 0;
      if (dur >= 86400) {
        dys = dur / 86400;
        dur %= 86400;
      }
      if (dur >= 3600) {
        hrs = dur / 3600;
        dur %= 3600;
      }
      if (dur >= 60) {
        mnts = dur / 60;
        dur %= 60;
      }
      char buffer[32];  // Increased size to handle larger strings safely
      snprintf(buffer, sizeof(buffer), "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    update_interval: 5s
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      icon: "mdi:ip"
    ssid:
      name: "Connected SSID"
      icon: "mdi:wifi"

